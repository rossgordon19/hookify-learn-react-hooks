import React, { createContext, useState, useContext, useEffect } from "react";

export type HookType =
  | "useState"
  | "useEffect"
  | "useContext"
  | "useReducer"
  | "useRef"
  | "useMemoCallback"
  | "useTransition"
  | "customHook";
export type FileType = "jsx" | "css";

interface CodeState {
  [key: string]: {
    jsx: string;
    css: string;
  };
}

interface CodeContextType {
  code: CodeState;
  activeHook: HookType;
  activeFile: FileType;
  setActiveHook: (hook: HookType) => void;
  setActiveFile: (file: FileType) => void;
  updateCode: (hook: HookType, file: FileType, newCode: string) => void;
  resetToBoilerplate: () => void;
}

const boilerplateTemplates: CodeState = {
  useState: {
    jsx: `import { useState } from 'react';
import './useState.css';

const Example = () => {
  const [count, setCount] = useState(0);

  const handleClick = () => {
    setCount(count + 1);
  };

  return (
    <button 
      className="useStateButton"
      onClick={handleClick}
    >
      Clicked {count} times
    </button>
  );
};

export default Example;`,
    css: `.useStateButton {
  background-color: #007bff;
  color: white;
  font-size: 18px;
  font-weight: bold;
  padding: 12px 20px;
  border: none;
  border-radius: 8px;
  cursor: pointer;
}`,
  },
  useEffect: {
    jsx: `import { useState, useEffect } from 'react';
import './useEffect.css';

const Example = () => {
  const [count, setCount] = useState(0);
  const [bgColor, setBgColor] = useState('white');

  const handleClick = () => {
    setCount(count + 1);
  };

  useEffect(() => {
    const colors = ['#FF5733', '#33FF57', '#3357FF', '#F3FF33', '#FF33A6'];
    setBgColor(colors[count % colors.length]);
  }, [count]);

  return (
    <button
      className="useEffectButton"
      style={{ backgroundColor: bgColor }}
      onClick={handleClick}
    >
      Clicked {count} times
    </button>
  );

}

export default Example;`,
    css: `.useEffectButton {
  color: white;
  font-size: 18px;
  font-weight: bold;
  padding: 12px 20px;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  transition: background 0.3s ease, transform 0.2s ease;
}

.useEffectButton:hover {
  transform: scale(1.05);
}`,
  },
  useContext: {
    jsx: `import { createContext, useContext, useState } from 'react';
import './useContext.css';

// 1️⃣ Create the Context
const ThemeContext = createContext({ 
  theme: 'light', 
  toggleTheme: () => {} 
});

const ThemeButton = () => {
  const { theme, toggleTheme } = useContext(ThemeContext);
  
  return (
    <button 
      className="theme-toggle"
      onClick={toggleTheme}
    >
      Switch to {theme === 'dark' ? 'light' : 'dark'} mode
    </button>
  );
};

const ThemedContent = () => {
  const { theme } = useContext(ThemeContext);
  
  return (
    <div className="content">
      <h2>Current Theme: {theme}</h2>
      <p>This content responds to the theme context.</p>
    </div>
  );
};

const Example = () => {
  // 3️⃣ Consume the Context
  const { theme } = useContext(ThemeContext);

  return (
    <div className={"themed-card " + theme}>
      <ThemedContent />
      <ThemeButton />
    </div>
  );
};

// 2️⃣ Provide the Context Value
const App = () => {
  const [theme, setTheme] = useState('dark');
  
  const toggleTheme = () => {
    setTheme(theme === 'dark' ? 'light' : 'dark');
  };

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      <Example />
    </ThemeContext.Provider>
  );
};

export default App;`,
    css: `.themed-card {
  padding: 20px;
  border-radius: 12px;
  width: 100%;
  max-width: 300px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
  text-align: center;
}

.light {
  background-color: #f8f9fa;
  color: #333;
}

.dark {
  background-color: #333;
  color: white;
}

.content {
  margin-bottom: 20px;
}

.content h2 {
  margin-bottom: 10px;
  font-size: 1.5rem;
}

.theme-toggle {
  background-color: transparent;
  border: 2px solid currentColor;
  border-radius: 6px;
  padding: 8px 16px;
  font-size: 14px;
  cursor: pointer;
  transition: all 0.2s ease;
}

.light .theme-toggle {
  color: #007bff;
}

.light .theme-toggle:hover {
  background-color: rgba(0, 123, 255, 0.1);
}

.dark .theme-toggle {
  color: #6ea8fe;
}

.dark .theme-toggle:hover {
  background-color: rgba(110, 168, 254, 0.1);
}`,
  },
  useReducer: {
    jsx: `import { useReducer } from 'react';
import './useReducer.css';

// 1️⃣ Define the reducer function
const reducer = (state: string): string => {
  return state === 'ON' ? 'OFF' : 'ON';
};

const Example = () => {
  // 2️⃣ Initialize useReducer
  const [state, dispatch] = useReducer(reducer, 'OFF');

  // 3️⃣ Dispatch an action on button click
  const handleClick = () => {
    dispatch();
  };

  return (
    <button className="useReducerButton" onClick={handleClick}>
      {state}
    </button>
  );
};

export default Example;`,
    css: `.useReducerButton {
  background-color: #28a745;
  color: white;
  font-size: 18px;
  font-weight: bold;
  padding: 12px 20px;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  transition: background 0.3s ease, transform 0.2s ease;
}

.useReducerButton:hover {
  transform: scale(1.05);
}`,
  },
  useRef: {
    jsx: `import { useRef } from 'react';
import './useRef.css';

const Example = () => {
  // Add your ref here
  
  return (
    <div className="useRefContainer">
      {/* Add your code here */}
    </div>
  );
}

export default Example;`,
    css: `.useRefContainer {
  padding: 20px;
  border-radius: 8px;
  background-color: #ced4da;
  color: #333;
}`,
  },
  useMemoCallback: {
    jsx: `import { useState, useMemo, useCallback } from 'react';
import './useMemoCallback.css';

const Example = () => {
  // Add your state here
  
  // Add your memoized value or callback here
  
  return (
    <div className="useMemoContainer">
      {/* Add your code here */}
    </div>
  );
}

export default Example;`,
    css: `.useMemoContainer {
  padding: 20px;
  border-radius: 8px;
  background-color: #adb5bd;
  color: #333;
}`,
  },
  useTransition: {
    jsx: `import { useState, useTransition, useDeferredValue } from 'react';
import './useTransition.css';

const Example = () => {
  // Add your state here
  
  // Add your transition or deferred value here
  
  return (
    <div className="useTransitionContainer">
      {/* Add your code here */}
    </div>
  );
}

export default Example;`,
    css: `.useTransitionContainer {
  padding: 20px;
  border-radius: 8px;
  background-color: #6c757d;
  color: white;
}`,
  },
  customHook: {
    jsx: `import { useState } from 'react';
import './customHook.css';

// Create your custom hook here
function useCustomHook() {
  // Add your hook logic here
}

const Example = () => {
  // Use your custom hook here
  
  return (
    <div className="customHookContainer">
      {/* Add your code here */}
    </div>
  );
}

export default Example;`,
    css: `.customHookContainer {
  padding: 20px;
  border-radius: 8px;
  background-color: #495057;
  color: white;
}`,
  },
};

const defaultCode: CodeState = {
  useState: {
    jsx: `import { useState } from 'react';
import './useState.css';

const Example = () => {
  const [count, setCount] = useState(0);

  return (
    <button 
      className="useStateButton"
      onClick={() => setCount(count + 1)}
    >
      Clicked {count} times
    </button>)
}

export default Example;`,
    css: `.useStateButton {
  background-color: #007bff;
  color: white;
  font-size: 18px;
  font-weight: bold;
  padding: 12px 20px;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  transition: background 0.3s ease, transform 0.2s ease;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.useStateButton:hover {
  background-color: #0056b3;
  transform: scale(1.05);
}

.useStateButton:active {
  background-color: #003f80;
  transform: scale(0.98);
}`,
  },
  useEffect: {
    jsx: `import { useState, useEffect } from 'react';
import './useEffect.css';

const Example = () => {
  const [count, setCount] = useState(0);
  const [bgColor, setBgColor] = useState('white');

  const handleClick = () => {
    setCount(count + 1);
  };

  useEffect(() => {
    const colors = ['#FF5733', '#33FF57', '#3357FF', '#F3FF33', '#FF33A6'];
    setBgColor(colors[count % colors.length]);
  }, [count]);

  return (
    <button
      className="useEffectButton"
      style={{ backgroundColor: bgColor }}
      onClick={handleClick}
    >
      Clicked {count} times
    </button>
  );

}

export default Example;`,
    css: `.useEffectButton {
  color: white;
  font-size: 18px;
  font-weight: bold;
  padding: 12px 20px;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  transition: background 0.3s ease, transform 0.2s ease;
}

.useEffectButton:hover {
  transform: scale(1.05);
}`,
  },
  useContext: {
    jsx: `import { createContext, useContext, useState } from 'react';
import './useContext.css';

// 1️⃣ Create the Context
const ThemeContext = createContext({ 
  theme: 'light', 
  toggleTheme: () => {} 
});

const ThemeButton = () => {
  const { theme, toggleTheme } = useContext(ThemeContext);
  
  return (
    <button 
      className="theme-toggle"
      onClick={toggleTheme}
    >
      Switch to {theme === 'dark' ? 'light' : 'dark'} mode
    </button>
  );
};

const ThemedContent = () => {
  const { theme } = useContext(ThemeContext);
  
  return (
    <div className="content">
      <h2>Current Theme: {theme}</h2>
      <p>This content responds to the theme context.</p>
    </div>
  );
};

const Example = () => {
  // 3️⃣ Consume the Context
  const { theme } = useContext(ThemeContext);

  return (
    <div className={"themed-card " + theme}>
      <ThemedContent />
      <ThemeButton />
    </div>
  );
};

// 2️⃣ Provide the Context Value
const App = () => {
  const [theme, setTheme] = useState('dark');
  
  const toggleTheme = () => {
    setTheme(theme === 'dark' ? 'light' : 'dark');
  };

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      <Example />
    </ThemeContext.Provider>
  );
};

export default App;`,
    css: `.themed-card {
  padding: 20px;
  border-radius: 12px;
  width: 100%;
  max-width: 300px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
  text-align: center;
}

.light {
  background-color: #f8f9fa;
  color: #333;
}

.dark {
  background-color: #333;
  color: white;
}

.content {
  margin-bottom: 20px;
}

.content h2 {
  margin-bottom: 10px;
  font-size: 1.5rem;
}

.theme-toggle {
  background-color: transparent;
  border: 2px solid currentColor;
  border-radius: 6px;
  padding: 8px 16px;
  font-size: 14px;
  cursor: pointer;
  transition: all 0.2s ease;
}

.light .theme-toggle {
  color: #007bff;
}

.light .theme-toggle:hover {
  background-color: rgba(0, 123, 255, 0.1);
}

.dark .theme-toggle {
  color: #6ea8fe;
}

.dark .theme-toggle:hover {
  background-color: rgba(110, 168, 254, 0.1);
}`,
  },
  useReducer: {
    jsx: `import { useReducer } from 'react';
import './useReducer.css';

// 1️⃣ Define the reducer function
const reducer = (state) => {
  return state === 'ON' ? 'OFF' : 'ON';
};

const Example = () => {
  // 2️⃣ Initialize useReducer
  const [state, dispatch] = useReducer(reducer, 'OFF');

  // 3️⃣ Dispatch an action on button click
  const handleClick = () => {
    dispatch();
  };

  return (
    <button className="useReducerButton" onClick={handleClick}>
      {state}
    </button>
  );
};

export default Example;`,
    css: `.useReducerButton {
      background-color: #28a745;
      color: white;
      font-size: 18px;
      font-weight: bold;
      padding: 12px 20px;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      transition: background 0.3s ease, transform 0.2s ease;
    }

    .useReducerButton:hover {
      transform: scale(1.05);
    }`,
  },
  useRef: {
    jsx: `import { useRef } from 'react';
import './useRef.css';

const Example = () => {
  // Add your ref here
  
  return (
    <div className="useRefContainer">
      {/* Add your code here */}
    </div>
  );
}

export default Example;`,
    css: `.useRefContainer {
  padding: 20px;
  border-radius: 8px;
  background-color: #ced4da;
  color: #333;
}`,
  },
  useMemoCallback: {
    jsx: `import { useState, useMemo, useCallback } from 'react';
import './useMemoCallback.css';

const Example = () => {
  // Add your state here
  
  // Add your memoized value or callback here
  
  return (
    <div className="useMemoContainer">
      {/* Add your code here */}
    </div>
  );
}

export default Example;`,
    css: `.useMemoContainer {
  padding: 20px;
  border-radius: 8px;
  background-color: #adb5bd;
  color: #333;
}`,
  },
  useTransition: {
    jsx: `import { useState, useTransition, useDeferredValue } from 'react';
import './useTransition.css';

const Example = () => {
  // Add your state here
  
  // Add your transition or deferred value here
  
  return (
    <div className="useTransitionContainer">
      {/* Add your code here */}
    </div>
  );
}

export default Example;`,
    css: `.useTransitionContainer {
  padding: 20px;
  border-radius: 8px;
  background-color: #6c757d;
  color: white;
}`,
  },
  customHook: {
    jsx: `import { useState } from 'react';
import './customHook.css';

// Create your custom hook here
function useCustomHook() {
  // Add your hook logic here
}

const Example = () => {
  // Use your custom hook here
  
  return (
    <div className="customHookContainer">
      {/* Add your code here */}
    </div>
  );
}

export default Example;`,
    css: `.customHookContainer {
  padding: 20px;
  border-radius: 8px;
  background-color: #495057;
  color: white;
}`,
  },
};

const CodeContext = createContext<CodeContextType | undefined>(undefined);

export const CodeProvider: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => {
  const [code, setCode] = useState<CodeState>(defaultCode);
  const [activeHook, setActiveHook] = useState<HookType>(() => {
    // Get the saved hook from localStorage or default to "useState"
    const savedHook = localStorage.getItem("activeHook") as HookType;
    return savedHook || "useState";
  });
  const [activeFile, setActiveFile] = useState<FileType>("jsx");

  // Save activeHook to localStorage whenever it changes
  useEffect(() => {
    localStorage.setItem("activeHook", activeHook);
  }, [activeHook]);

  const updateCode = (hook: HookType, file: FileType, newCode: string) => {
    setCode((prevCode) => ({
      ...prevCode,
      [hook]: {
        ...prevCode[hook],
        [file]: newCode,
      },
    }));
  };

  const resetToBoilerplate = () => {
    setCode((prevCode) => ({
      ...prevCode,
      [activeHook]: {
        ...boilerplateTemplates[activeHook],
      },
    }));
  };

  return (
    <CodeContext.Provider
      value={{
        code,
        activeHook,
        activeFile,
        setActiveHook,
        setActiveFile,
        updateCode,
        resetToBoilerplate,
      }}
    >
      {children}
    </CodeContext.Provider>
  );
};

export const useCodeContext = () => {
  const context = useContext(CodeContext);
  if (!context) {
    throw new Error("useCodeContext must be used within a CodeProvider");
  }
  return context;
};
